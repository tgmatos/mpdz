const std = @import("std");

const Writer = std.net.Stream.Writer;
const Reader = std.net.Stream.Reader;

const PlaybackError = error{ PauseFailure, BadSongIndex, NotPlaying, GeneralError, ReadError };

fn getResponse(reader: *const Reader) anyerror![]u8 {
    var response: [128]u8 = undefined;
    var fbs = std.io.fixedBufferStream(&response);
    var wrt = fbs.writer();

    _ = try reader.streamUntilDelimiter(wrt, '\n', null);
    return &response;
}

pub fn pause(writer: *const Writer) anyerror!void {
    _ = try writer.writeAll("pause\n");
}

pub fn play(writer: *const Writer, reader: *const Reader, pos: u32) anyerror!void {
    _ = try writer.print("play {d}\n", .{pos});

    var resp = try getResponse(reader);
    if (!std.mem.eql(u8, resp[0..2], "OK")) {
        return PlaybackError.BadSongIndex;
    }
}

pub fn previous(writer: *const Writer, reader: *const Reader) anyerror!void {
    _ = try writer.writeAll("previous\n");

    var resp = try getResponse(reader);
    if (!std.mem.eql(u8, resp[0..2], "OK")) {
        return PlaybackError.NotPlaying;
    }
}

pub fn stop(writer: *const Writer) anyerror!void {
    _ = try writer.writeAll("stop\n");
}

pub fn seek(writer: *const Writer, reader: *const Reader, pos: u32, seconds: u32) anyerror!void {
    _ = try writer.print("seek \"{d}\" \"{d}\"\n", .{ pos, seconds });

    var resp = try getResponse(reader);
    if (!std.mem.eql(u8, resp[0..2], "OK")) {
        return PlaybackError.BadSongIndex;
    }
}
